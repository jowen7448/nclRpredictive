%\VignetteIndexEntry{solutions3}
%\VignetteEngine{Sweave}

<<echo=FALSE>>=
results='show';echo=TRUE
@
\documentclass[a4paper,justified,openany]{tufte-handout}
<<setup, echo=FALSE, cache=FALSE>>=
dir.create("graphics", showWarnings = FALSE)
library("knitr")
opts_knit$set(self.contained=FALSE, tidy = TRUE, 
              cache = TRUE, size = "small", message = FALSE,
              fig.path='knitr_figure/graphics-', 
               cache.path='knitr_cache/graphics-', 
               fig.align='center', 
               dev='pdf', fig.width=5, fig.height=5)

knit_hooks$set(par=function(before, options, envir){
    if (before && options$fig.show!='none') {
        par(mar=c(3,3,2,1),cex.lab=.95,cex.axis=.9,
            mgp=c(2,.7,0),tcl=-.01, las=1)
}}, crop=hook_pdfcrop)
opts_knit$set(out.format = "latex")
@
\usepackage{amsmath}
\usepackage{graphicx}
\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
\graphicspath{{graphics/}}
\title{Predictive Analytics: practical 3 \Sexpr{ifelse(echo, "solutions", "")}}
\date{} % if the \date{} command is left out, the current date will be used
\usepackage{booktabs}
\usepackage{units}
\usepackage{fancyvrb}
\fvset{fontsize=\normalsize}
\newcommand{\cc}{\texttt}
\graphicspath{{../graphics/}}
\setcounter{secnumdepth}{2}
\usepackage{microtype}

\begin{document}

\maketitle% this prints the handout title, author, and date

<<echo = echo, message = FALSE>>=
library("caret")
data(FuelEconomy, package = "AppliedPredictiveModeling")
set.seed(1)
@

\section*{Resampling methods}

\begin{itemize}
  \item Fit a KNN regression model to the \cc{cars2010} data set with \cc{FE} as the response.\marginnote{The data set can be loaded \cc{data("FuelEconomy", package = "AppliedPredictiveModeling")}.}
<<echo=echo>>=
mKNN = train(FE ~ ., method = "knn", data = cars2010)
@ 

  \item Estimate test error using the validation set approach explored at the beginning of the chapter
<<echo=echo>>=
# create a random sample to hold out
i = sample(nrow(cars2010), 100)
# set the train control object
tc = trainControl(method = "cv", number = 1,
    index = list(Fold1 = (1:nrow(cars2010))[-i]))
# fit the model using this train control object
mKNNvs = train(FE~., method = "knn", data = cars2010,
    trControl = tc)
@ 

  \item Using the same validation set, estimate the performance of the k nearest neighbours algorithm for different values of $k$.
<<echo=echo, cache=TRUE>>=
mKNNvs2 = train(FE~., method = "knn", data = cars2010,
     trControl = tc, tuneGrid = data.frame(k= 2:20))
@ 
  \item Which model is chosen as the best when using the validation set approach?
<<echo=echo, results=results>>=
## With set.seed(1)
mKNNvs2$bestTune
@

\item Create new \cc{trainControl} objects to specify the use of 5 fold and 10 fold cross validation as well as bootstrapping to estimate test MSE.
<<echo=echo, cache=TRUE>>=
tc5fold = trainControl(method = "cv", number = 5)
tc10fold = trainControl(method = "cv", number = 10)
# use 50 boot strap estimates
tcboot = trainControl(method = "boot", number = 50)
@ 

  \item Go through the same training procedure attempting to find the best KNN model.
<<echo=echo, results=results, cache=TRUE>>=
mKNNcv5 = train(FE~., data = cars2010, method = "knn",
    trControl = tc5fold, tuneGrid = data.frame(k = 2:20))

mKNNcv10 = train(FE~., data = cars2010, method = "knn",
    trControl = tc10fold, tuneGrid = data.frame(k = 2:20))

mKNNboot = train(FE~., data = cars2010, method = "knn",
    trControl = tcboot, tuneGrid = data.frame(k = 2:20))
mKNNcv5$bestTune
mKNNcv10$bestTune
mKNNboot$bestTune
@ 

  \item How do the results vary based on the method of estimation?
<<echo=echo, results=results, cache=TRUE,fig.keep="none">>= 
#The k-fold cross validation estimates and bootstrap estimates all 
#yield the same conclusion, however it is different to when we used 
#validation set approach earlier. We could plot the results 
# from each on one plot to compare further:
plot(2:20, mKNNboot$results[,2],type = "l", ylab = "RMSE",
     xlab = "k", ylim = c(3,6.5))
lines(2:20, mKNNcv10$results[,2], col = "red")
lines(2:20, mKNNcv5$results[,2], col = "blue")
lines(2:20, mKNNvs2$results[,2], col = "green")
@ 
  \item Are the conclusions always the same?
<<echo=echo>>=
#no see previous answer
@

\end{itemize}

\noindent If we add the \cc{returnResamp = "all"} argument in the trainControl function we can plot the resampling distributions, see figure~\ref{fig:cvresamp}.

<<fig.keep = "none">>=
tc = trainControl(method = "cv", number = 15, 
                  returnResamp = "all")
m = train(FE~., data = cars2010, method = "knn", 
          tuneGrid = data.frame(k = 1:15), trControl = tc)
boxplot(RMSE~k, data = m$resample)
@
<<echo = FALSE>>=
pdf("graphics/cvresamp.pdf", width = 6,height = 4)
setnicepar(); mypalette(1)
boxplot(RMSE~k, data = m$resample, xlab = "k", ylab = "RMSE", main = "15 fold cv estimates", 
        ylim=c(0, 5), col=3)
sink = dev.off()
system("pdfcrop graphics/cvresamp.pdf")
@

\begin{figure}[t]
  \centering
  \includegraphics[width = \textwidth]{graphics/cvresamp-crop}
  \caption{$15$ fold cross validation estimates of RMSE in a $K$ nearest neighbours model against number of nearest neighbours.}
  \label{fig:cvresamp}
\end{figure}

We can overlay the information from each method using \cc{add = TRUE}. In addition we could compare the computational cost of each of the methods. The output list from a \cc{train} object contains timing information which can be accessed
<<eval = FALSE>>=
m$time
@

\begin{itemize}
  \item Which method is the most computationally efficient?
<<echo=echo, results=results, cache=TRUE, tidy=TRUE>>=
mKNNvs2$time$everything
mKNNcv5$time$everything
mKNNcv10$time$everything
mKNNboot$time$everything
#The validation set approach was quickest, however we must bear in mind that the conclusion here 
#was different to the other cross validation approaches. The two k--fold cross validation estimates of RMSE and the bootstrap
#estimates all agreed with each other lending more weight to their conclusions. Plus we saw in the lectures that validation set
#approach was prone to highly variable estimates meaning we could get a different conclusion using a different hold out set.
#Either of the two k--fold cross validation methods would be preferable here.
@
\end{itemize}

\section*{Penalised regression}

The \cc{diabetes} data set in the \cc{lars} package contains measurements of a number of predictors to model a response $y$, a measure of disease progression. There are other columns in the data set which contain interactions so we will extract just the predictors and the response. The data has already been normalized.

% <<>>=
% data(diabetes, package = "lars")
% 
% diabetesdata = cbind(diabetes$x,"y" = diabetes$y)
% # shortcut to create a model formula with all 2 way 
% # interactions and square terms.
% modelFormula = as.formula(paste("y~(.)^2 + ",
%   paste("I(",colnames(diabetesdata[,1:10]),"^2)", 
%         collapse = "+",sep = "")))
% 
% @

<<cache=TRUE>>=
data(diabetes, package = "lars")
diabetesdata = cbind(diabetes$x,"y" = diabetes$y)
@


\begin{itemize}
\item Try fitting a lasso, ridge and elastic net model using all of the main effects, pairwise interactions and square terms from each of the predictors.\sidenote{Hint: see notes for shortcut on creating model formula. Also be aware that if the predictor is a factor a polynomial term doesn't make sense}
<<echo=echo, results=results, cache=TRUE, tidy=TRUE, warning=FALSE, message=FALSE, eval=echo>>=
## load the data in 
modelformula = as.formula(paste("y~(.)^2 + ",
    paste0("I(",colnames(diabetesdata),"^2)", 
          collapse = "+")
    ))
mLASSO = train(modelformula, data = diabetesdata,
    method = "lasso")
mRIDGE = train(modelformula, data = diabetesdata,
    method = "ridge")
mENET = train(modelformula, data = diabetesdata,
    method = "enet")
@ 
\marginnote{\cc{fraction = 0} is the same as the null model.}
\marginnote{ 
\cc{$y \sim (.) \wedge 2$}
is short hand for a model that includes pairwise interactions for each predictor, so if we use this we should only need to add the square terms}

% <<warning = FALSE, message = FALSE, echo = FALSE>>=
% m.lasso = train(modelFormula, data = diabetesdata, 
%         method = "lasso", 
%         tuneGrid = data.frame(fraction = seq(0,1,0.05)))
% @
% 
% <<warning = FALSE, message = FALSE, echo = FALSE>>=
% m.lasso = train(modelFormula, data = diabetesdata, 
%         method = "lasso", 
%         tuneGrid = data.frame(fraction = seq(0,1,0.05)))
% @


  \item Try to narrow in on the region of lowest RMSE for each model, don't forget about the \cc{tuneGrid} argument to the train function.
<<echo=echo, results=results, cache=TRUE, warning=FALSE, eval=echo, message=FALSE>>=
# examine previous output then train over a finer grid near the better end
mLASSOfine = train(modelformula,data = diabetesdata,
    method = "lasso", tuneGrid = data.frame(fraction = seq(0.1,0.5,by = 0.05)))
mLASSOfine$results
# best still right down at the 0.1 end
mLASSOfiner = train(modelformula,data = diabetesdata,
    method = "lasso", tuneGrid = data.frame(fraction = seq(0.01,0.15,by = 0.01)))
mLASSOfiner$results
# 0.09 seems the best

mRIDGEfine = train(modelformula,data = diabetesdata,
    method = "ridge", tuneGrid = data.frame(lambda = seq(0,0.1,by = 0.01)))
mRIDGEfine$results
mRIDGEfiner = train(modelformula,data = diabetesdata,
    method = "ridge", tuneGrid = data.frame(lambda = seq(0.005,0.03,by = 0.001)))
mRIDGEfiner$results
# 0.023 seems best

mENETfine = train(modelformula, data = diabetesdata, 
    method = "enet", tuneGrid = expand.grid(
                         lambda = c(0.001,0.01,0.1),
                         fraction = c(0.4,0.5,0.6)
    ))
mENETfine$results

mENETfiner = train(modelformula, data = diabetesdata, 
    method = "enet", tuneGrid = expand.grid(
                         lambda = seq(0.001,0.1,length.out = 10),
                         fraction = 0.5))
mENETfiner$results
# 0.012, 0.5 best
@ 
\noindent We can view what the coefficients will be by using
<<eval = FALSE>>=
coef = predict(m.lasso$finalModel,
        mode = "fraction",
        s = 0.1,# which ever fraction was chosen as best
        type = "coefficients"
)
@


  \item How many features have been chosen by the lasso and enet models?
<<echo=echo, results=results, cache=TRUE, eval=echo>>=
# use predict to find the coefficients
coefLASSO = predict(mLASSOfiner$finalModel, mode = "fraction", 
        type = "coefficient", s = 0.09
        )
sum(coefLASSO$coefficients != 0)
coefENET= predict(mENETfiner$finalModel, mode = "fraction", 
        type = "coefficient", s = 0.5
        )
sum(coefENET$coefficients != 0)
@ 
  \item How do these models compare to principal components and partial least squares regression?
<<echo=echo, results=results, tidy=TRUE, cache=TRUE, message=FALSE, eval=echo>>=
mPCR = train(modelformula, data = diabetesdata, method = "pcr",
             tuneGrid = data.frame(ncomp = 1:7))
mPLS = train(modelformula, data = diabetesdata, method = "pls",
             tuneGrid = data.frame(ncomp= 1:7))
mPLS2 = train(modelformula, data = diabetesdata, method = "pls",
             tuneGrid = data.frame(ncomp= 5:15))
getTrainPerf(mLASSOfiner)
getTrainPerf(mRIDGEfiner)
getTrainPerf(mENETfiner)
getTrainPerf(mPCR)
getTrainPerf(mPLS2)
#The elastic net model has the lowest estimated test error, all are fairly similar. The elastic net model suggests only 21 non--zero
#coefficients out of all of those included in the model.
@
\end{itemize}



\section*{Advanced}

\marginnote{This section is intended for users who have a more in depth background to R programming. Attendance to the Programming in R course should be adequate background.}

So far we have only used default functions and metrics to compare the performance of models, however we are not restricted to doing this. For example, training of classification models is typically more difficult when there is an imbalance in the two classes in the training set. Models trained from such data typically have high specificity but poor sensitivity or vice versa. Instead of training to maximise accuracy using data from the training set we could try to maximise according to some other criteria, namely sensitivity and specificity being as close to perfect as possible $(1, 1)$.

To add our function we need to make sure we mirror the structure of those included in caret already.\marginnote{We can view a functions code by typing its name with no brackets.} The following code creates a new function that could be used to summarise a model
<<>>=
fourStats = function (data, lev = NULL, model = NULL) {
  # This code will use the area under the ROC curve and the
  # sensitivity and specificity values from the built in 
  # twoClassSummary function
  out = twoClassSummary(data, lev = levels(data$obs), 
                        model = NULL)
  # The best possible model has sensitivity of 1 and 
  # specifity of 1. How far are we from that value?
  coords = matrix(c(1, 1, out["Spec"], out["Sens"]), 
                   ncol = 2, 
                   byrow = TRUE)
  # return the disctance measure together with the 
  # output from two class summary
  c(Dist = dist(coords)[1], out)
}
@
\noindent we could then use this in the \cc{train} function
<<>>=
data(Sonar, package = "mlbench")
mod = train(Class ~ ., data = Sonar,
              method = "knn",
              # Minimize the distance to the perfect model
              metric = "Dist",
              maximize = FALSE,
              tuneLength = 20,
              trControl = 
    trainControl(method = "cv", classProbs = TRUE,
                     summaryFunction = fourStats))
@

\noindent The \cc{plot} function 

<<figure2, eval=FALSE>>=
plot(mod)
@

\begin{marginfigure}
\centering
<<figure2, echo=FALSE>>=
@
  \caption{Plot of the distance from a perfect classifier measured by sensitivity and specificity against tuning parameter for a $k$ nearest neighbour model.}
  \label{fig:newsummary}
\end{marginfigure}

\noindent will then show the profile of the resampling estimates of our chosen statistic against the tuning parameters, see figure~\ref{fig:newsummary}.

\begin{itemize}
  \item Have a go at writing a function that will allow a regression model to be chosen by the absolute value of the largest residual and try using it to fit a couple of models.
<<echo=echo, results=results, cache=TRUE, tidy=TRUE, eval=echo, message=FALSE>>=
maxabsres = function(data, lev = NULL, model = NULL){
    m = max(abs(data$obs - data$pred))
    return(c("Max" = m))
}
# Test with pls regression
tccustom = trainControl(method = "cv",
                     summaryFunction = maxabsres)
mPLScustom = train(FE~., data = cars2010, 
                   method = "pls",
               tuneGrid = data.frame(ncomp = 1:6),
               trControl = tccustom,
               metric = "Max", maximize = FALSE)
# success
# not to suggest this is a good choice of metric
@ 
\end{itemize}

\end{document}

