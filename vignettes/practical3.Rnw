%\VignetteIndexEntry{practical3}
%!Snw weave = knitr
%\VignetteEngine{knitr::knitr}
\documentclass[a4paper,justified,openany]{tufte-handout}
<<setup, echo=FALSE, cache=FALSE>>=
if(!file.exists("graphics")) dir.create("graphics")
# e = tryCatch(dir.create("graphics"), error = function(e) e)
library(knitr)
opts_knit$set(self.contained=FALSE, tidy = TRUE, 
              cache = TRUE, size = "small", message = FALSE,
              fig.path='knitr_figure/graphics-', 
               cache.path='knitr_cache/graphics-', 
               fig.align='center', 
               dev='pdf', fig.width=5, fig.height=5)

knit_hooks$set(par=function(before, options, envir){
    if (before && options$fig.show!='none') {
        par(mar=c(3,3,2,1),cex.lab=.95,cex.axis=.9,
            mgp=c(2,.7,0),tcl=-.01, las=1)
}}, crop=hook_pdfcrop)
# knit_theme$set(knit_theme$get("greyscale0"))

opts_knit$set(out.format = "latex")

# options(replace.assign=FALSE,width=50)
# opts_chunk$set(fig.path='knitr_figure/graphics-',
# cache.path='knitr_cache/graphics-',
# fig.align='center',
# dev='pdf', fig.width=5, fig.height=5,
# fig.show='hold', cache=FALSE, par=TRUE)
# knit_hooks$set(crop=hook_pdfcrop)
# knit_hooks$set(par=function(before, options, envir){
# if (before && options$fig.show!='none') {
# par(mar=c(3,3,2,1),cex.lab=.95,cex.axis=.9,
# mgp=c(2,.7,0),tcl=-.01, las=1)
# }}, crop=hook_pdfcrop)
@
\usepackage{amsmath}
% Set up the images/graphics package
\usepackage{graphicx}
\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
\graphicspath{{graphics/}}
\title{Predictive Analytics: practical 3}
\date{} % if the \date{} command is left out, the current date will be used
% The following package makes prettier tables. We're all about the bling!
\usepackage{booktabs}
% The units package provides nice, non-stacked fractions and better spacing
% for units.
\usepackage{units}
% The fancyvrb package lets us customize the formatting of verbatim
% environments. We use a slightly smaller font.
\usepackage{fancyvrb}
\fvset{fontsize=\normalsize}
\newcommand{\cc}{\texttt}
\graphicspath{{../graphics/}}
\setcounter{secnumdepth}{2}
\usepackage{microtype}

\begin{document}

\maketitle% this prints the handout title, author, and date

% \section*{Course R package}
% Installing the course R package\sidenote{A package is an \textit{add-on} or a \textit{module}. It provides additional functions and data.}
% is straightforward. First install \cc{drat}:
% <<eval=FALSE, tidy=FALSE>>=
% install.packages("drat")
% @
% \noindent Then
% <<eval=FALSE, tidy=FALSE>>=
% drat::addRepo("rcourses")
% install.packages("nclRpredictive", type="source")
% @
% \noindent This R package contains copies of the practicals, solutions and data sets that we require. To load the package, use
% <<>>=
% library(nclRpredictive)
% @
% \noindent To install the \cc{caret} package for model fitting, if you don't already have it, and then load it in
% <<eval = FALSE>>=
% install.packages("caret")
% library(caret)
% @
<<echo = FALSE, message = FALSE>>=
library(caret)
@

\section*{Resampling methods}

\begin{itemize}
  \item Fit a KNN regression model to the \cc{cars2010} data set with \cc{FE} as the response.\marginnote{The data set can be loaded \cc{data("FuelEconomy",package = "AppliedPredictiveModeling")}.}
  \item Estimate test error using the validation set approach explored at the beginning of the chapter
\end{itemize}

% Fit a KNN regression model to the \cc{cars2010} data set with \cc{FE} as the response.\marginnote{The data set can be loaded \cc{data("FuelEconomy",package = "AppliedPredictiveModeling")}.} We will use the validation set approach first. Create a hold out set in order to estimate the test error for the models.

<<echo = FALSE>>=
data(FuelEconomy, package = "AppliedPredictiveModeling")
@

% <<>>=
% set.seed(10)
% i = sample(nrow(cars2010), 107)
% @
% 
% \noindent We can specify that we want to use this hold out set via a train control object
% <<>>=
% tc = trainControl(method = "cv",
%   index = list(Fold1 = (1:nrow(cars2010))[-i]),
%   number = 1)
% @
% 
% \noindent Use the \cc{tuneGrid} argument to the train function to specify we want to try fitting models using from 5 to 50 nearest neighbours.\marginnote{tuneGrid takes a data frame, we can create unit increase sequences with \cc{1:15}.}

\begin{itemize}
  \item Using the same validation set, estimate the performance of the k nearest neighbours algorithm for different values of $k$.
  \item Which model is chosen as the best when using the validation set approach?
  \item Create new \cc{trainControl} objects to specify the use of 5 fold and 10 fold cross validation as well as bootstrapping to estimate test MSE.
  \item Go through the same training procedure attempting to find the best KNN model.
  \item How do the results vary based on the method of estimation?
  \item Are the conclusions always the same?
\end{itemize}

% \noindent Which model is chosen as the best when using the validation set approach?

% \noindent Create new \cc{trainControl} objects to specify the use of 5 fold and 10 fold cross validation as well as bootstrapping to estimate test MSE. Go through the same training procedure attempting to find the best KNN model. How do the results vary based on the method of estimation?
% Are the conclusions always the same?

\noindent If we add the \cc{returnResamp = "all"} argument in the trainControl function we can plot the resampling distributions, see figure~\ref{fig:cvresamp}.

<<fig.keep = "none">>=
tc = trainControl(method = "cv", number = 15, 
                  returnResamp = "all")
m = train(FE~., data = cars2010, method = "knn", 
          tuneGrid = data.frame(k = 1:15), trControl = tc)
          
boxplot(RMSE~k, data = m$resample)
@
<<echo = FALSE>>=
pdf("graphics/cvresamp.pdf", width = 5,height = 4)
boxplot(RMSE~k, data = m$resample, xlab = "k", ylab = "RMSE", main = "15 fold cv estimates")
sink = dev.off()
system("pdfcrop graphics/cvresamp.pdf")
@

\begin{figure}[!ht]
  \includegraphics[width = \textwidth]{graphics/cvresamp-crop}
  \caption{15 fold cross validation estimates of RMSE in a K nearest neighbours model against number of nearest neighbours.}
  \label{fig:cvresamp}
\end{figure}


We can overlay the information from each method using \cc{add = TRUE}. In addition we could compare the computational cost of each of the methods. The output list from a \cc{train} object contains timing information which can be accessed
<<eval = FALSE>>=
m$time
@

\begin{itemize}
  \item Which method is the most computationally efficient?
\end{itemize}

\section*{Penalised regression}

The \cc{diabetes} data set in the \cc{lars} package contains measurements of a number of predictors to model a response $y$, a measure of disease progression. There are other columns in the data set which contain interactions so we will extract just the predictors and the response. The data has already been normalized.

% <<>>=
% data(diabetes, package = "lars")
% 
% diabetesdata = cbind(diabetes$x,"y" = diabetes$y)
% # shortcut to create a model formula with all 2 way 
% # interactions and square terms.
% modelFormula = as.formula(paste("y~(.)^2 + ",
%   paste("I(",colnames(diabetesdata[,1:10]),"^2)", 
%         collapse = "+",sep = "")))
% 
% @

<<>>=
data(diabetes, package = "lars")

diabetesdata = cbind(diabetes$x,"y" = diabetes$y)
@


\begin{itemize}
\item Try fitting a lasso, ridge and elastic net model using all of the main effects, pairwise interactions and square terms from each of the predictors.\sidenote{Hint: see notes for shortcut on creating model formula. Also be aware that if the predictor is a factor a polynomial term doesn't make sense}
\end{itemize}
\marginnote{fraction = 0 is the same as the null model.}
\marginnote{ 
\cc{$y \sim (.) \wedge 2$}
is short hand for a model that includes pairwise interactions for each predictor, so if we use this we should only need to add the square terms}

% <<warning = FALSE, message = FALSE, echo = FALSE>>=
% m.lasso = train(modelFormula, data = diabetesdata, 
%         method = "lasso", 
%         tuneGrid = data.frame(fraction = seq(0,1,0.05)))
% @
% 
% <<warning = FALSE, message = FALSE, echo = FALSE>>=
% m.lasso = train(modelFormula, data = diabetesdata, 
%         method = "lasso", 
%         tuneGrid = data.frame(fraction = seq(0,1,0.05)))
% @

\begin{itemize}
  \item Try to narrow in on the region of lowest RMSE for each model, don't forget about the \cc{tuneGrid} argument to the train function.
\end{itemize}

% \noindent We could investigate the region where the RMSE is lowest by setting up a new tuneGrid to search, to try and find the smallest RMSE possible.

We can view what the coefficients will be by using
<<eval = FALSE>>=
coef = predict(m.lasso$finalModel,
        mode = "fraction",
        s = 0.1,# which ever fraction was chosen as best
        type = "coefficients"
)
@

\begin{itemize}
  \item How many features have been chosen by the lasso and enet models?
  \item How do these models compare to principal components and partial least squares regression?
\end{itemize}

% \noindent How many features have been chosen by the lasso and enet models?
% 
% \noindent How do these models compare to principal components and partial least squares regression?

\section*{Advanced}

This section is intended for users who have a more in depth background to R programming. Attendance to the Programming in R course should be adequate background.

\noindent So far we have only used default functions and metrics to compare the performance of models, however we are not restricted to doing this. For example:

Training of classification models is typically more difficult when there is an imbalance in the two classes in the training set. Models trained from such data typically have high specificity but poor sensitivity or vice versa. Instead of training to maximise accuracy using data from the training set we could try to maximise according to some other criteria, namely sensitivity and specificity being as close to perfect as possible (1,1).

\noindent To add our function we need to make sure we mirror the structure of those included in caret already.\marginnote{We can view a functions code by typing its name with no brackets.} The following code creates a new function that could be used to summarise a model
<<>>=
fourStats = function (data, lev = NULL, model = NULL) {
  # This code will use the area under the ROC curve and the
  # sensitivity and specificity values from the built in 
  # twoClassSummary function
  out = twoClassSummary(data, lev = levels(data$obs), 
                        model = NULL)
  # The best possible model has sensitivity of 1 and 
  # specifity of 1. How far are we from that value?
  coords = matrix(c(1, 1, out["Spec"], out["Sens"]), 
                   ncol = 2, 
                   byrow = TRUE)
  # return the disctance measure together with the 
  # output from two class summary
  c(Dist = dist(coords)[1], out)
}
@
we could then use this in the train function
<<>>=
data(Sonar, package = "mlbench")
mod = train(Class ~ ., data = Sonar,
              method = "knn",
              # Minimize the distance to the perfect model
              metric = "Dist",
              maximize = FALSE,
              tuneLength = 20,
              trControl = 
    trainControl(method = "cv", classProbs = TRUE,
                     summaryFunction = fourStats))
@

\noindent The plot function will then show the profile of the resampling estimates of our chosen statistic against the tuning parameters, see figure~\ref{fig:newsummary}.

<<echo = FALSE, message = FALSE>>=
pdf("graphics/newsummary.pdf", height = 4, width = 4)
plot(mod)
sink = dev.off()
system("pdfcrop graphics/newsummary.pdf")
@
<<eval = FALSE>>=
plot(mod)
@
\begin{marginfigure}
  \includegraphics[]{graphics/newsummary-crop}
  \caption{Plot of the distance from a perfect classifier measured by sensitivity and specificity against tuning parameter for a k nearest neighbour model.}
  \label{fig:newsummary}
\end{marginfigure}

\begin{itemize}
  \item Have a go at writing a function that will allow a regression model to be chosen by the absolute value of the largest residual and try using it to fit a couple of models.
\end{itemize}
% \noindent Have a go at writing a function that will allow a regression models by the absolute value of the largest residual and try using it to fit a couple of models.

\end{document}

