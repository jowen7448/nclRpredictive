%\VignetteIndexEntry{solutions2}
%\VignetteEngine{Sweave}


\documentclass[a4paper,justified,openany]{tufte-handout}\usepackage{knitr}

\usepackage{amsmath}
\usepackage{graphicx}
\setkeys{Gin}{width=\linewidth,totalheight=\textheight,keepaspectratio}
\graphicspath{{graphics/}}
\title{Predictive Analytics: practical 2solutions}
\date{} % if the \date{} command is left out, the current date will be used

\usepackage{booktabs}
\usepackage{units}
\usepackage{fancyvrb}
\fvset{fontsize=\normalsize}
\newcommand{\cc}{\texttt}
\graphicspath{{../graphics/}}
\setcounter{secnumdepth}{2}
\usepackage{microtype}
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\begin{document}
\maketitle% this prints the handout title, author, and date

\section*{The \cc{OJ} data set}

The \cc{OJ} dataset of the \cc{ISLR} package contains information on which of two brands of orange juice customers purchased and can be loaded in using
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{data}\hlstd{(OJ,} \hlkwc{package} \hlstd{=} \hlstr{"ISLR"}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}

\noindent After loading the \cc{caret} package 
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{library}\hlstd{(}\hlstr{"caret"}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}

\noindent Make an initial examination of the relationships between each of the predictors and the response\sidenote{Use the \cc{plot} function with a model formula or the \cc{pairs} function.}
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{par}\hlstd{(}\hlkwc{mfrow} \hlstd{=} \hlkwd{c}\hlstd{(}\hlnum{4}\hlstd{,}\hlnum{5}\hlstd{),} \hlkwc{mar}\hlstd{=} \hlkwd{c}\hlstd{(}\hlnum{4}\hlstd{,}\hlnum{.5}\hlstd{,}\hlnum{.5}\hlstd{,}\hlnum{.5}\hlstd{))}
\hlkwd{plot}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJ)}
\end{alltt}
\end{kframe}
\end{knitrout}

\section*{Initial model building}

\begin{itemize}
\item To begin, create a logistic regression model that takes into consideration the prices of the two brands of orange juice, \cc{PriceCH} and \cc{PriceMM}.\sidenote{Hint: The train function does model fitting, the method argument specifies the type of model. \cc{method = ``glm''} is used for logistic regression.}
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{m1} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase} \hlopt{~} \hlstd{PriceCH} \hlopt{+} \hlstd{PriceMM,}
    \hlkwc{data} \hlstd{= OJ,} \hlkwc{method} \hlstd{=} \hlstr{"glm"}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}
  \item What proportion of purchases does this model get right?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{mean}\hlstd{(}\hlkwd{predict}\hlstd{(m1)} \hlopt{!=} \hlstd{OJ}\hlopt{$}\hlstd{Purchase)}
\end{alltt}
\begin{verbatim}
## [1] 0.3776
\end{verbatim}
\end{kframe}
\end{knitrout}
  \item How does this compare to if we used no model?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{# with no model we essentially predict according to }
\hlcom{# proportion of observations in data}
\hlstd{probs} \hlkwb{=} \hlkwd{table}\hlstd{(OJ}\hlopt{$}\hlstd{Purchase)}\hlopt{/}\hlkwd{nrow}\hlstd{(OJ)}
\hlstd{preds} \hlkwb{=} \hlkwd{sample}\hlstd{(}\hlkwd{levels}\hlstd{(OJ}\hlopt{$}\hlstd{Purchase),} \hlkwc{prob} \hlstd{= probs)}
\hlkwd{mean}\hlstd{(preds} \hlopt{!=} \hlstd{OJ}\hlopt{$}\hlstd{Purchase)}
\end{alltt}
\begin{verbatim}
## [1] 0.5009
\end{verbatim}
\end{kframe}
\end{knitrout}
\end{itemize}

\noindent The following code produces a plot of the decision boundary as seen in figure~\ref{fig:purchaseboundary}.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{## Set up a grid for prediction}
\hlstd{chrange} \hlkwb{=} \hlkwd{range}\hlstd{(OJ}\hlopt{$}\hlstd{PriceCH)}
\hlstd{mmrange} \hlkwb{=} \hlkwd{range}\hlstd{(OJ}\hlopt{$}\hlstd{PriceMM)}
\hlstd{chseq} \hlkwb{=} \hlkwd{seq}\hlstd{(chrange[}\hlnum{1}\hlstd{],chrange[}\hlnum{2}\hlstd{],}\hlkwc{length.out} \hlstd{=} \hlnum{100}\hlstd{)}
\hlstd{mmseq} \hlkwb{=} \hlkwd{seq}\hlstd{(mmrange[}\hlnum{1}\hlstd{],mmrange[}\hlnum{2}\hlstd{],}\hlkwc{length.out} \hlstd{=} \hlnum{100}\hlstd{)}
\hlstd{grid} \hlkwb{=} \hlkwd{expand.grid}\hlstd{(}\hlstr{"PriceCH"} \hlstd{= chseq,} \hlstr{"PriceMM"} \hlstd{= mmseq)}

\hlcom{# make the predictions}
\hlstd{predictions} \hlkwb{=} \hlkwd{predict}\hlstd{(m1,grid,}\hlkwc{type} \hlstd{=} \hlstr{"prob"}\hlstd{)}
\hlcom{# turn the predictions into a matrix for a contour plot}
\hlstd{predmat} \hlkwb{=} \hlkwd{matrix}\hlstd{(predictions[,}\hlnum{2}\hlstd{],} \hlkwc{nrow}\hlstd{=}\hlnum{100}\hlstd{)}
\hlkwd{contour}\hlstd{(chseq, mmseq, predmat,} \hlkwc{levels} \hlstd{=} \hlnum{0.5}\hlstd{,}
        \hlkwc{xlab} \hlstd{=} \hlstr{"Price CH"}\hlstd{,} \hlkwc{ylab} \hlstd{=} \hlstr{"Price MM"}\hlstd{,}
        \hlkwc{lwd} \hlstd{=} \hlnum{2}\hlstd{,} \hlkwc{main} \hlstd{=} \hlstr{"Blue = MM"}\hlstd{)}

\hlcom{# the background points indicating prediction}
\hlkwd{points}\hlstd{(grid,}\hlkwc{col} \hlstd{=} \hlkwd{c}\hlstd{(}\hlstr{"red"}\hlstd{,}\hlstr{"blue"}\hlstd{)[}\hlkwd{predict}\hlstd{(m1,grid)],}
       \hlkwc{cex} \hlstd{=} \hlnum{0.2}\hlstd{)}
\hlcom{# there are few unique combinations of prices, }
\hlcom{# jitter can help see the points}
\hlcom{# points of prices coloured by purchased brand}
\hlkwd{points}\hlstd{(}\hlkwd{jitter}\hlstd{(OJ}\hlopt{$}\hlstd{PriceCH,}\hlkwc{factor} \hlstd{=} \hlnum{2}\hlstd{),}
       \hlkwd{jitter}\hlstd{(OJ}\hlopt{$}\hlstd{PriceMM,} \hlkwc{factor} \hlstd{=} \hlnum{2}\hlstd{),}
       \hlkwc{col} \hlstd{=} \hlkwd{c}\hlstd{(}\hlstr{"red"}\hlstd{,}\hlstr{"blue"}\hlstd{)[OJ}\hlopt{$}\hlstd{Purchase],}
       \hlkwc{pch} \hlstd{=} \hlnum{19}\hlstd{,} \hlkwc{cex}  \hlstd{=}\hlnum{0.6}\hlstd{)}

\hlcom{# add dashed line of equal price}
\hlkwd{abline}\hlstd{(}\hlnum{0}\hlstd{,}\hlnum{1}\hlstd{,}\hlkwc{lwd} \hlstd{=} \hlnum{2}\hlstd{,} \hlkwc{lty} \hlstd{=} \hlnum{2}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}



\begin{marginfigure}
  \includegraphics[width = \textwidth]{graphics/purchaseboundary-crop}
  \caption{Examining the decision boundary for orange juice brand purchases by price.}
  \label{fig:purchaseboundary}
\end{marginfigure}

%% \textbf{XXX: Typing the above code will take a while. Look at the nclRexercises
%% package and use the same trick to allow partipants to load the code}
\begin{itemize}
  \item What happens if we add an interaction term? How does the boundary change?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{# We now have a curved decision boundary. There are two regions of where we}
\hlcom{# would predict MM, bottom left, and a tiny one up in the top right.}
\end{alltt}
\end{kframe}
\end{knitrout}

\end{itemize}

\section*{Using all of the predictors}

\begin{itemize}
  \item Fit a logistic regression model using all of the predictors
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{mLM} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase} \hlopt{~} \hlstd{.,} \hlkwc{data} \hlstd{= OJ,} \hlkwc{method} \hlstd{=} \hlstr{"glm"}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}
  \item Is there a problem?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{## YES!}
\end{alltt}
\end{kframe}
\end{knitrout}

\noindent We can view the most recent warning messages by using the \cc{warnings} function
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{warnings}\hlstd{()}
\end{alltt}
\begin{verbatim}
## NULL
\end{verbatim}
\end{kframe}
\end{knitrout}



\noindent This suggests some rank--deficient fit problems,

\item Look at the final model, you should notice that a number of parameters have not been estimated
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{m_log}\hlopt{$}\hlstd{finalModel}
\end{alltt}
\begin{verbatim}
## 
## Call:  NULL
## 
## Coefficients:
##    (Intercept)  WeekofPurchase         StoreID         PriceCH  
##         5.1581         -0.0118         -0.1709          4.5865  
##        PriceMM          DiscCH          DiscMM       SpecialCH  
##        -3.6249         10.7967         26.4615          0.2672  
##      SpecialMM         LoyalCH     SalePriceMM     SalePriceCH  
##         0.3169         -6.3023              NA              NA  
##      PriceDiff       Store7Yes       PctDiscMM       PctDiscCH  
##             NA          0.3113        -50.6976        -27.3399  
##  ListPriceDiff           STORE  
##             NA              NA  
## 
## Degrees of Freedom: 1069 Total (i.e. Null);  1057 Residual
## Null Deviance:	    1430 
## Residual Deviance: 817 	AIC: 843
\end{verbatim}
\end{kframe}
\end{knitrout}

\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlopt{?}\hlstd{ISLR}\hlopt{::}\hlstd{OJ}
\end{alltt}
\end{kframe}
\end{knitrout}
\noindent gives further insight, the \cc{PriceDiff} variable is a linear combination of \cc{SalePriceMM} and \cc{SalePriceCH} so we should remove this. In addition we have a \cc{StoreID} variable and a \cc{STORE} variable are different encodings of the same information so we should remove one of these too. We also have \cc{DiscCH} and \cc{DiscMM} which are the differences between \cc{PriceCH} and \cc{SalePriceCH} and 
\cc{PriceMM} and \cc{SalePriceMM} respectively and \cc{ListPriceDiff} is a linear combination of these prices. Removing all of these vairables allows the model to be fit and all parameters to be estimated.\sidenote{This is to highlight that we need to understand what we have in our data.}
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{OJsub} \hlkwb{=} \hlstd{OJ[}\hlopt{!}\hlstd{(}\hlkwd{colnames}\hlstd{(OJ)} \hlopt{%in%} \hlkwd{c}\hlstd{(}\hlstr{"STORE"}\hlstd{,} \hlstr{"SalePriceCH"}\hlstd{,}
           \hlstr{"SalePriceMM"}\hlstd{,}\hlstr{"PriceDiff"}\hlstd{,} \hlstr{"ListPriceDiff"}\hlstd{))]}
\hlstd{OJsub}\hlopt{$}\hlstd{Store7} \hlkwb{=} \hlkwd{as.double}\hlstd{(OJsub}\hlopt{$}\hlstd{Store7)} \hlopt{-} \hlnum{1}
\hlstd{m.log} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase} \hlopt{~} \hlstd{.,} \hlkwc{data} \hlstd{= OJsub,} \hlkwc{method} \hlstd{=} \hlstr{"glm"}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}

\noindent The problem of linear combinations of predictors can be shown with this simple theoretical example. Suppose we have a response $y$ and three predictors $x_1$, $x_2$ and the linear combination $(x_1 + x_2)$. On fitting a linear model we try to find estimates of the parameters in the equation
\[
y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \beta_3 (x_1 + x_2).
\]
\noindent However we could just as easily rewrite this as
\begin{align*}
y &= \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \beta_3 (x_1 + x_2) \\
&= \beta_0 + (\beta_1 + \beta_3) x_1 + (\beta_2 + \beta_3) x_2 \\
&= \beta_0 + \beta_1^{\ast} x_1 + \beta_2^{\ast} x_2.
\end{align*}
This leads to a rank deficient model matrix, essentially we can never find the value of the $\beta_3$ due to the fact we have the linear combination of predictors.

We could acheive the same using the caret package function \cc{findLinearCombos}. The function takes a model matrix as an argument. We can create such a matrix using the 
\cc{model.matrix} function with our formula object
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{remove} \hlkwb{=} \hlkwd{findLinearCombos}\hlstd{(}\hlkwd{model.matrix}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJ))}
\end{alltt}
\end{kframe}
\end{knitrout}
\noindent The output list has a component called \cc{remove} suggesting which variables should be removed to get rid of linear combinations
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{(badvar} \hlkwb{=} \hlkwd{colnames}\hlstd{(OJ)[remove}\hlopt{$}\hlstd{remove])}
\end{alltt}
\begin{verbatim}
## [1] "SalePriceMM"   "SalePriceCH"   "PriceDiff"     "ListPriceDiff"
## [5] "STORE"
\end{verbatim}
\begin{alltt}
\hlstd{OJsub} \hlkwb{=} \hlstd{OJ[,} \hlopt{-}\hlstd{(remove}\hlopt{$}\hlstd{remove)]}
\end{alltt}
\end{kframe}
\end{knitrout}
\end{itemize}

\begin{itemize}
  \item How accurate is this new model using more predictors?]
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{# the corrected model}
\hlstd{remove} \hlkwb{=} \hlkwd{findLinearCombos}\hlstd{(}\hlkwd{model.matrix}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJ))}
\hlstd{(badvar} \hlkwb{=} \hlkwd{colnames}\hlstd{(OJ)[remove}\hlopt{$}\hlstd{remove])}
\end{alltt}
\begin{verbatim}
## [1] "SalePriceMM"   "SalePriceCH"   "PriceDiff"     "ListPriceDiff"
## [5] "STORE"
\end{verbatim}
\begin{alltt}
\hlstd{OJsub} \hlkwb{=} \hlstd{OJ[,}\hlopt{-}\hlstd{(remove}\hlopt{$}\hlstd{remove)]}
\hlstd{mLM} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJsub,} \hlkwc{method} \hlstd{=} \hlstr{"glm"}\hlstd{)}
\hlkwd{mean}\hlstd{(}\hlkwd{predict}\hlstd{(mLM,OJsub)} \hlopt{==} \hlstd{OJsub}\hlopt{$}\hlstd{Purchase)}
\end{alltt}
\begin{verbatim}
## [1] 0.8355
\end{verbatim}
\end{kframe}
\end{knitrout}
  \item What are the values of sensitivity and specificity?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{## could use confusionMatrix}
\hlstd{(cmLM} \hlkwb{=} \hlkwd{confusionMatrix}\hlstd{(}\hlkwd{predict}\hlstd{(mLM,OJsub),OJsub}\hlopt{$}\hlstd{Purchase))}
\end{alltt}
\begin{verbatim}
## Confusion Matrix and Statistics
## 
##           Reference
## Prediction  CH  MM
##         CH 577 100
##         MM  76 317
##                                         
##                Accuracy : 0.836         
##                  95% CI : (0.812, 0.857)
##     No Information Rate : 0.61          
##     P-Value [Acc > NIR] : <2e-16        
##                                         
##                   Kappa : 0.651         
##  Mcnemar's Test P-Value : 0.083         
##                                         
##             Sensitivity : 0.884         
##             Specificity : 0.760         
##          Pos Pred Value : 0.852         
##          Neg Pred Value : 0.807         
##              Prevalence : 0.610         
##          Detection Rate : 0.539         
##    Detection Prevalence : 0.633         
##       Balanced Accuracy : 0.822         
##                                         
##        'Positive' Class : CH            
## 
\end{verbatim}
\begin{alltt}
\hlcom{# or }
\hlkwd{sensitivity}\hlstd{(}\hlkwd{predict}\hlstd{(mLM,OJsub),OJsub}\hlopt{$}\hlstd{Purchase)}
\end{alltt}
\begin{verbatim}
## [1] 0.8836
\end{verbatim}
\begin{alltt}
\hlkwd{specificity}\hlstd{(}\hlkwd{predict}\hlstd{(mLM,OJsub),OJsub}\hlopt{$}\hlstd{Purchase)}
\end{alltt}
\begin{verbatim}
## [1] 0.7602
\end{verbatim}
\end{kframe}
\end{knitrout}
  \item What does this mean?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{# The model is fairly good at picking up both positive events, person buys}
\hlcom{# CH, and negative events, MM.}
\end{alltt}
\end{kframe}
\end{knitrout}

\end{itemize}
% Now that we have fitted a simple model we can look at it's accuracy using the \cc{confusionMatrix} function
% <<>>=
% confusionMatrix(predict(m.log),OJsub$Purchase)
% @

\section*{ROC curves}
\begin{marginfigure}
  \includegraphics[width = \textwidth]{graphics/roc-crop}
  \caption{An example of a ROC curve for the logistic regression classifier. We can overlay ROC curves by adding the \cc{add = TRUE} argument.}
  \label{fig:roc}
\end{marginfigure}

If we were interested in the area under the ROC curve, we could retrain the model using the \cc{twoClassSummary} function as an argument to a train control object. Alternatively we can use the \cc{roc} function in the \cc{pROC} package. This also allows us to view the ROC curve, see figure~\ref{fig:roc}. 
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{library}\hlstd{(}\hlstr{"pROC"}\hlstd{)}
\end{alltt}


{\ttfamily\noindent\itshape\color{messagecolor}{\#\# Type 'citation("{}pROC"{})' for a citation.\\\#\# \\\#\# Attaching package: 'pROC'\\\#\# \\\#\# The following objects are masked from 'package:stats':\\\#\# \\\#\#\ \ \ \  cov, smooth, var}}\begin{alltt}
\hlstd{curve} \hlkwb{=} \hlkwd{roc}\hlstd{(}\hlkwc{response} \hlstd{= OJsub}\hlopt{$}\hlstd{Purchase,}
  \hlkwc{predictor} \hlstd{=} \hlkwd{predict}\hlstd{(m.log,} \hlkwc{type} \hlstd{=} \hlstr{"prob"}\hlstd{)[,}\hlstr{"CH"}\hlstd{])}
\hlcom{## this makes CH the event of interest}
\hlkwd{plot}\hlstd{(curve,} \hlkwc{legacy.axes} \hlstd{=} \hlnum{TRUE}\hlstd{)}
\hlkwd{auc}\hlstd{(curve)}
\end{alltt}
\end{kframe}
\end{knitrout}


\section*{Other classification models}

\begin{itemize}
  \item Try fitting models using the other classification algorithms we have seen so far.\marginnote{We have seen LDA, QDA, KNN and logistic regression.}
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlstd{mKNN} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJsub,} \hlkwc{method} \hlstd{=} \hlstr{"knn"}\hlstd{)}
\hlstd{mLDA} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJsub,} \hlkwc{method} \hlstd{=} \hlstr{"lda"}\hlstd{)}
\hlstd{mQDA} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= OJsub,} \hlkwc{method} \hlstd{=} \hlstr{"qda"}\hlstd{)}
\hlstd{cmKNN} \hlkwb{=} \hlkwd{confusionMatrix}\hlstd{(}\hlkwd{predict}\hlstd{(mKNN,OJsub),OJsub}\hlopt{$}\hlstd{Purchase)}
\hlstd{cmLDA} \hlkwb{=} \hlkwd{confusionMatrix}\hlstd{(}\hlkwd{predict}\hlstd{(mLDA,OJsub),OJsub}\hlopt{$}\hlstd{Purchase)}
\hlstd{cmQDA} \hlkwb{=} \hlkwd{confusionMatrix}\hlstd{(}\hlkwd{predict}\hlstd{(mQDA,OJsub),OJsub}\hlopt{$}\hlstd{Purchase)}
\hlstd{(info} \hlkwb{=} \hlkwd{data.frame}\hlstd{(}\hlkwc{Model} \hlstd{=} \hlkwd{c}\hlstd{(}\hlstr{"logistic"}\hlstd{,}\hlstr{"knn"}\hlstd{,}\hlstr{"lda"}\hlstd{,}\hlstr{"qda"}\hlstd{),}
           \hlkwc{Accuracy} \hlstd{=} \hlkwd{c}\hlstd{(cmLM}\hlopt{$}\hlstd{overall[}\hlstr{"Accuracy"}\hlstd{],}
               \hlstd{cmKNN}\hlopt{$}\hlstd{overall[}\hlstr{"Accuracy"}\hlstd{],}
               \hlstd{cmLDA}\hlopt{$}\hlstd{overall[}\hlstr{"Accuracy"}\hlstd{],}
               \hlstd{cmQDA}\hlopt{$}\hlstd{overall[}\hlstr{"Accuracy"}\hlstd{]),}
           \hlkwc{Sensitivity} \hlstd{=} \hlkwd{c}\hlstd{(cmLM}\hlopt{$}\hlstd{byClass[}\hlstr{"Sensitivity"}\hlstd{],}
               \hlstd{cmKNN}\hlopt{$}\hlstd{byClass[}\hlstr{"Sensitivity"}\hlstd{],}
               \hlstd{cmLDA}\hlopt{$}\hlstd{byClass[}\hlstr{"Sensitivity"}\hlstd{],}
               \hlstd{cmQDA}\hlopt{$}\hlstd{byClass[}\hlstr{"Sensitivity"}\hlstd{]),}
           \hlkwc{Specificity} \hlstd{=} \hlkwd{c}\hlstd{(cmLM}\hlopt{$}\hlstd{byClass[}\hlstr{"Specificity"}\hlstd{],}
               \hlstd{cmKNN}\hlopt{$}\hlstd{byClass[}\hlstr{"Specificity"}\hlstd{],}
               \hlstd{cmLDA}\hlopt{$}\hlstd{byClass[}\hlstr{"Specificity"}\hlstd{],}
               \hlstd{cmQDA}\hlopt{$}\hlstd{byClass[}\hlstr{"Specificity"}\hlstd{])))}
\end{alltt}
\begin{verbatim}
##      Model Accuracy Sensitivity Specificity
## 1 logistic   0.8355      0.8836      0.7602
## 2      knn   0.8103      0.8775      0.7050
## 3      lda   0.8374      0.8790      0.7722
## 4      qda   0.8168      0.8407      0.7794
\end{verbatim}
\end{kframe}
\end{knitrout}
  \item How do they compare?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{#Logistic regression and LDA have highest accuracy, QDA is poorest at classifying events, KNN gives most false positives}
\end{alltt}
\end{kframe}
\end{knitrout}

  \item How does varying the number of nearest neighbours in a KNN affect the model fit?
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{# Accuracy increases at first with knn before then getting worse after a}
\hlcom{# peak value of 9.}
\hlstd{(mKNN2} \hlkwb{=} \hlkwd{train}\hlstd{(Purchase} \hlopt{~} \hlstd{.,} \hlkwc{data} \hlstd{= OJsub,} \hlkwc{method} \hlstd{=} \hlstr{"knn"}\hlstd{,} \hlkwc{tuneGrid} \hlstd{=} \hlkwd{data.frame}\hlstd{(}\hlkwc{k} \hlstd{=} \hlnum{1}\hlopt{:}\hlnum{30}\hlstd{)))}
\end{alltt}
\begin{verbatim}
## k-Nearest Neighbors 
## 
## 1070 samples
##   12 predictors
##    2 classes: 'CH', 'MM' 
## 
## No pre-processing
## Resampling: Bootstrapped (25 reps) 
## 
## Summary of sample sizes: 1070, 1070, 1070, 1070, 1070, 1070, ... 
## 
## Resampling results across tuning parameters:
## 
##   k   Accuracy  Kappa   Accuracy SD  Kappa SD
##    1  0.6878    0.3466  0.01889      0.03912 
##    2  0.6792    0.3306  0.02445      0.04976 
##    3  0.6790    0.3295  0.02525      0.05355 
##    4  0.6859    0.3431  0.02196      0.04753 
##    5  0.6965    0.3625  0.01963      0.04238 
##    6  0.6981    0.3641  0.02169      0.04826 
##    7  0.6966    0.3581  0.02005      0.04359 
##    8  0.6958    0.3553  0.02070      0.04443 
##    9  0.6958    0.3537  0.02212      0.04748 
##   10  0.6955    0.3518  0.02655      0.05692 
##   11  0.6949    0.3500  0.02678      0.05963 
##   12  0.6879    0.3352  0.02359      0.05284 
##   13  0.6851    0.3281  0.02804      0.06155 
##   14  0.6811    0.3192  0.02670      0.05911 
##   15  0.6764    0.3097  0.02740      0.05769 
##   16  0.6724    0.3003  0.02541      0.05325 
##   17  0.6703    0.2958  0.02493      0.05052 
##   18  0.6703    0.2955  0.02525      0.05185 
##   19  0.6693    0.2922  0.02460      0.05036 
##   20  0.6667    0.2866  0.02041      0.04134 
##   21  0.6662    0.2822  0.01896      0.04005 
##   22  0.6617    0.2734  0.01989      0.04075 
##   23  0.6607    0.2709  0.02275      0.04618 
##   24  0.6571    0.2636  0.02310      0.04692 
##   25  0.6556    0.2612  0.02094      0.04197 
##   26  0.6555    0.2612  0.02273      0.04824 
##   27  0.6542    0.2588  0.02617      0.05417 
##   28  0.6553    0.2590  0.02576      0.05583 
##   29  0.6544    0.2566  0.02366      0.05188 
##   30  0.6519    0.2530  0.02429      0.05289 
## 
## Accuracy was used to select the optimal model using  the largest value.
## The final value used for the model was k = 6.
\end{verbatim}
\end{kframe}
\end{knitrout}
\end{itemize}

\noindent The KNN algorithm described in the notes can also be used for regression problems. In this case the predicted response is the mean of the $k$ nearest neighbours.
\begin{itemize}
  \item Try fitting the KNN model for the regression problem in practical 1. 
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{library}\hlstd{(}\hlstr{"nclRpredictive"}\hlstd{)}
\hlkwd{data}\hlstd{(FuelEconomy,} \hlkwc{package} \hlstd{=} \hlstr{"AppliedPredictiveModeling"}\hlstd{)}
\hlstd{regKNN} \hlkwb{=} \hlkwd{train}\hlstd{(FE}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= cars2010,} \hlkwc{method} \hlstd{=} \hlstr{"knn"}\hlstd{)}
\hlstd{regLM} \hlkwb{=} \hlkwd{train}\hlstd{(FE}\hlopt{~}\hlstd{.,} \hlkwc{data} \hlstd{= cars2010,} \hlkwc{method} \hlstd{=} \hlstr{"lm"}\hlstd{)}
\hlstd{regKNN}\hlkwb{=} \hlkwd{validate}\hlstd{(regKNN)}
\hlstd{regLM} \hlkwb{=} \hlkwd{validate}\hlstd{(regLM)}
\hlkwd{mark}\hlstd{(regKNN)}
\hlkwd{mark}\hlstd{(regLM)}
\end{alltt}
\end{kframe}
\end{knitrout}

  \item How does this compare to the linear regression models?

\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlcom{# The KNN regression model is not as good as the linear model at predicting}
\hlcom{# the test set. It overestimates more at the lower end.}
\end{alltt}
\end{kframe}
\end{knitrout}

\end{itemize}

\section*{An example with more than two classes}

The \cc{Glass} data set in the \cc{mlbench} package is a data frame containing examples of the chemical analysis of $7$ different types of glass. The goal is to be able to predict which category glass falls into based on the values of the $9$ predictors.
\begin{knitrout}
\definecolor{shadecolor}{rgb}{0.969, 0.969, 0.969}\color{fgcolor}\begin{kframe}
\begin{alltt}
\hlkwd{data}\hlstd{(Glass,} \hlkwc{package} \hlstd{=} \hlstr{"mlbench"}\hlstd{)}
\end{alltt}
\end{kframe}
\end{knitrout}

\noindent A logistic regression model is typically not suitable for more than $2$ classes, so try fitting the other models using a training set that consists of 90\% of the available data.\marginnote{The function \cc{createDataPartition} can be used here, see notes for a reminder.}

% \section*{Advanced}
% 
% Training of classification models is typically more difficult when there is an imbalance in the two classes in the training set. Models trained from such data typically have high specificity but poor sensitivity or vice versa. Instead of training to maximise accuracy using data from the training set we could try to maximise according to some other criteria, namely sensitivity and specificity being as close to perfect as possible (1,1).
% 
% We can define our own functions to train by
% <<>>=
% rfctrl = rfeControl(method = "cv")
% remove = c(1,findLinearCombos(model.matrix(Purchase~., data = OJsub))$remove)
% remove = c(remove, findCorrelation(cor(model.matrix(Purchase~., data = OJsub)[,-1])))
% require(doMC)
% registerDoMC(6)
% m.log.rfe = rfe(x = model.matrix(Purchase~. , data = OJsub)[,-remove], 
%                 y = OJsub$Purchase, rfeControl = rfctrl, 
%                 method = "glm", trControl = trainControl("cv"), tuneLength = 7)
% @
% 
% 
% 
% 
% 
% <<eval = FALSE>>=
% var = function(model , response = NULL, predictor = response){
%   y =as.double(response)
%   res = residuals(model$finalModel)
%   plot(predictor, res, col = c("blue","red")[y])
%   lines(lowess(predictor,res),col="black",lwd=2)
%   lines(lowess(predictor[y==1],res[y==1]),col="blue")
% lines(lowess(predictor[y==2],res[y==2]),col="red")
% abline(h=0,lty=2,col="grey")
% }
% @
% 
% 

\end{document}
